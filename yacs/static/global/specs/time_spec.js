// Generated by CoffeeScript 1.3.1
(function() {

  describe('Time', function() {
    describe('constructor', function() {
      it('accepts options argument', function() {
        var t;
        t = new Time({
          hour: '03',
          minute: '04',
          second: '05'
        });
        expect(t.hour).toEqual(3);
        expect(t.minute).toEqual(4);
        return expect(t.second).toEqual(5);
      });
      return it('accepts positional argument', function() {
        var t;
        t = new Time('3', '4', '5');
        expect(t.hour).toEqual(3);
        expect(t.minute).toEqual(4);
        return expect(t.second).toEqual(5);
      });
    });
    describe('determining AM/PM', function() {
      it('returns AM for 11', function() {
        expect(new Time({
          hour: 11
        }).isAM()).toBeTruthy();
        return expect(new Time({
          hour: 11
        }).isPM()).toBeFalsy();
      });
      it('returns PM for 12 (noon)', function() {
        expect(new Time({
          hour: 12
        }).isPM()).toBeTruthy();
        return expect(new Time({
          hour: 12
        }).isAM()).toBeFalsy();
      });
      return it('returns AM for 12 (midnight)', function() {
        expect(new Time({
          hour: 0
        }).isAM()).toBeTruthy();
        return expect(new Time({
          hour: 0
        }).isPM()).toBeFalsy();
      });
    });
    it('converts military hour to standard hour', function() {
      expect(new Time({
        hour: 11
      }).standardHour()).toEqual(11);
      return expect(new Time({
        hour: 14
      }).standardHour()).toEqual(2);
    });
    return describe('enforces military time ranges in constructor', function() {
      it('asserts military hours', function() {
        expect(function() {
          return new Time({
            hour: 24
          });
        }).toThrow('hour must be between 0 and 23 (inclusive)');
        return expect(function() {
          return new Time({
            hour: -1
          });
        }).toThrow('hour must be between 0 and 23 (inclusive)');
      });
      it('asserts minutes', function() {
        expect(function() {
          return new Time({
            minute: 60
          });
        }).toThrow('minute must be between 0 and 59 (inclusive)');
        return expect(function() {
          return new Time({
            minute: -1
          });
        }).toThrow('minute must be between 0 and 59 (inclusive)');
      });
      return it('asserts seconds', function() {
        expect(function() {
          return new Time({
            second: 60
          });
        }).toThrow('second must be between 0 and 59 (inclusive)');
        return expect(function() {
          return new Time({
            second: -1
          });
        }).toThrow('second must be between 0 and 59 (inclusive)');
      });
    });
  });

}).call(this);
