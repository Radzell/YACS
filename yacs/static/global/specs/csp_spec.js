// Generated by CoffeeScript 1.3.1
(function() {

  describe('BruteForceSolver', function() {
    it('can solve a given problem given a problem instance', function() {
      var problem, result;
      problem = {
        variables: function() {
          return ['x', 'y'];
        },
        domains: function() {
          return [[1, 2, 3], [1, 2, 3]];
        },
        create_solution: CSP.Problem.prototype.create_solution,
        satisfies: function(solution) {
          return solution.x < solution.y;
        }
      };
      result = CSP.bruteForce(problem);
      return expect(result).toEqual([
        {
          x: 1,
          y: 2
        }, {
          x: 1,
          y: 3
        }, {
          x: 2,
          y: 3
        }
      ]);
    });
    return it('can restrict the number of results', function() {
      var problem, result;
      problem = {
        variables: function() {
          return ['x', 'y'];
        },
        domains: function() {
          return [[1, 2, 3], [1, 2, 3]];
        },
        create_solution: CSP.Problem.prototype.create_solution,
        satisfies: function(solution) {
          return solution.x < solution.y;
        }
      };
      result = CSP.bruteForce(problem, {
        max_results: 1
      });
      return expect(result).toEqual([
        {
          x: 1,
          y: 2
        }
      ]);
    });
  });

  describe('Problem', function() {
    return it('can specify a constraints problem to solve', function() {
      var constraints, p;
      constraints = [jasmine.createSpy(), jasmine.createSpy()];
      p = new CSP.Problem({
        variables: {
          x: [1, 2, 3],
          y: [1, 2, 3]
        },
        constraints: constraints
      });
      expect(p.variables()).toEqual(['x', 'y']);
      expect(p.domains()).toEqual([[1, 2, 3], [1, 2, 3]]);
      expect(p.constraints).toEqual(constraints);
      return expect(p.create_solution([1, 2])).toEqual({
        x: 1,
        y: 2
      });
    });
  });

}).call(this);
