// Generated by CoffeeScript 1.3.1
(function() {

  describe('liveform', function() {
    it('should invoke callback when form changes', function() {
      var form, spy;
      form = document.createElement('form');
      form.action = '/';
      form.method = 'POST';
      $(form).append('<input type="text" name="name" value="" />');
      spy = jasmine.createSpy();
      liveform(form, {
        changed: spy
      });
      form.name.value = 'john';
      $(form.name).trigger('keyup');
      return expect(spy).toHaveBeenCalledWith($(form));
    });
    it('should invoke empty callback if form is reset', function() {
      var form, spy;
      form = document.createElement('form');
      form.action = '/';
      form.method = 'POST';
      $(form).append('<input type="text" name="name" value="" />');
      spy = jasmine.createSpy();
      liveform(form, {
        empty: spy
      });
      $(form.name).val('foo').trigger('keyup');
      $(form.name).val('').trigger('keyup');
      return expect(spy.callCount).toEqual(1);
    });
    return it('should not invoke callback if form data does not change', function() {
      var form, spy;
      form = document.createElement('form');
      form.action = '/';
      form.method = 'POST';
      $(form).append('<input type="text" name="name" value="" />');
      spy = jasmine.createSpy();
      liveform(form, {
        changed: spy
      });
      $(form.name).trigger('keyup');
      $(form.name).val('foo').trigger('keyup');
      $(form.name).val('foo').trigger('keyup');
      return expect(spy.callCount).toEqual(1);
    });
  });

  describe('form_for_ajax', function() {
    return it('returns an object of form information', function() {
      var data, form;
      spyOn($.fn, 'serialize').andCallFake(function() {
        return 'name=john doe';
      });
      form = document.createElement('form');
      form.action = '/submit';
      form.method = 'POST';
      $(form).append('<input type="text" name="name" value="john doe" />');
      data = form_for_ajax(form);
      return expect(data).toEqual({
        url: '/submit',
        type: 'POST',
        data: 'name=john doe',
        cache: false
      });
    });
  });

  describe('updateform', function() {
    it('should perform ajax request on form change', function() {
      var events, form;
      form = document.createElement('form');
      form.action = '/submission';
      form.method = 'POST';
      $(form).append('<input type="text" name="name" value="" />');
      spyOn($, 'ajax').andCallFake(function(options) {
        expect(options.url).toEqual('/submission');
        expect(options.type).toEqual('POST');
        return options.success('foobar2000');
      });
      spyOn(window, 'delayfn').andCallFake(function(msec, fn) {
        return fn;
      });
      events = {
        start: jasmine.createSpy(),
        ajax_start: jasmine.createSpy(),
        error: jasmine.createSpy(),
        update: jasmine.createSpy()
      };
      updateform(form, events);
      $(form.name).val('john').trigger('keyup');
      expect(events.start).toHaveBeenCalled();
      expect(events.ajax_start).toHaveBeenCalled();
      expect(events.update).toHaveBeenCalledWith('foobar2000');
      expect($.ajax).toHaveBeenCalled();
      return expect(window.delayfn).toHaveBeenCalled();
    });
    it('should invoke empty callback on empty form', function() {
      var events, form;
      form = document.createElement('form');
      form.method = form.action = 'ignore';
      $(form).append('<input type="text" name="name" value="" />');
      spyOn($, 'ajax').andCallFake(function(options) {
        return options.success('foobar');
      });
      events = {
        empty: jasmine.createSpy()
      };
      updateform(form, events);
      $(form.name).trigger('keyup');
      return expect(events.empty).toHaveBeenCalledWith($(form));
    });
    it('should abort current request for a new one', function() {
      runs(function() {
        var form;
        form = document.createElement('form');
        form.method = form.action = 'ignore';
        $(form).append('<input type="text" name="name" value="" />');
        spyOn($, 'ajax').andCallFake(function(options) {
          return options.success('foobar');
        });
        this.events = {
          start: jasmine.createSpy(),
          ajax_start: jasmine.createSpy(),
          error: jasmine.createSpy(),
          update: jasmine.createSpy()
        };
        updateform(form, $.extend({}, this.events, {
          delay: 1
        }));
        $(form.name).val('john').trigger('keyup');
        return $(form.name).val('johnn').trigger('keyup');
      });
      waits(3);
      return runs(function() {
        expect(this.events.start.callCount).toEqual(2);
        expect(this.events.ajax_start.callCount).toEqual(1);
        expect(this.events.error.callCount).toEqual(0);
        expect(this.events.update.callCount).toEqual(1);
        return expect(this.events.update).toHaveBeenCalledWith('foobar');
      });
    });
    return it('should call error on failure', function() {
      runs(function() {
        var form;
        form = document.createElement('form');
        form.method = form.action = 'ignore';
        $(form).append('<input type="text" name="name" value="" />');
        spyOn($, 'ajax').andCallFake(function(options) {
          setTimeout((function() {
            return options.error();
          }), 1);
          return 1;
        });
        spyOn(window, 'delayfn').andCallFake(function(msec, fn) {
          return fn;
        });
        this.events = {
          error: jasmine.createSpy(),
          update: jasmine.createSpy()
        };
        updateform(form, this.events);
        return $(form.name).val('john').trigger('keyup');
      });
      waits(2);
      return runs(function() {
        return expect(this.events.error).toHaveBeenCalled();
      });
    });
  });

}).call(this);
