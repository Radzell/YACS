// Generated by CoffeeScript 1.3.1
(function() {
  var API, Collection, Model, api,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Model = (function() {

    Model.name = 'Model';

    function Model(attrs) {
      this.attrs = attrs;
      if (this.attrs == null) {
        this.attrs = {};
      }
    }

    Model.prototype.get = function(name, defvalue) {
      return this.attrs[name] || defvalue;
    };

    Model.prototype.set = function(name, value) {
      return this.attrs[name] = value;
    };

    Model.prototype.set_attributes = function(attrs) {
      return $.extend(this.attrs, attrs);
    };

    Model.prototype.replace_attributes = function(attrs) {
      return this.attrs = $.extend({}, attrs);
    };

    Model.prototype.refresh = function(options) {
      var self, success;
      options = options || {};
      success = options.success || $.noop;
      self = this;
      return $.ajax($.extend({
        url: this.get('url')
      }, options, {
        success: function(data) {
          self.replace_attributes(data.result);
          return success(self);
        }
      }));
    };

    return Model;

  })();

  Collection = (function(_super) {

    __extends(Collection, _super);

    Collection.name = 'Collection';

    function Collection(url) {
      this.url = url;
    }

    Collection.prototype.attr = function(name) {
      var item;
      return [
        (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = self.length; _i < _len; _i++) {
            item = self[_i];
            _results.push(item[name]);
          }
          return _results;
        })()
      ];
    };

    Collection.prototype.refresh = function(options) {
      var self, success, url;
      options = options || {};
      success = options.success;
      self = this;
      url = options.url || this.url;
      return $.ajax($.extend({
        url: url
      }, options, {
        success: function(data) {
          var item, _i, _len, _ref;
          self.splice(0, self.length);
          _ref = data.result;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            self.push(item);
          }
          return success(self);
        }
      }));
    };

    return Collection;

  })(Array);

  API = (function() {

    API.name = 'API';

    function API() {
      this.base_url = '/api/4/';
    }

    API.prototype.url = function(object, id) {
      if (id != null) {
        return this.base_url + object + '/' + id + '/';
      } else {
        return this.base_url + object + '/';
      }
    };

    API.prototype.get = function(url, success, error) {
      return $.ajax({
        url: url,
        type: 'GET',
        dataType: 'json',
        cache: true,
        success: function(data) {
          var collection, x;
          if (data.success) {
            if (_.isArray(data.result)) {
              collection = new Collection(url);
              [
                (function() {
                  var _i, _len, _ref, _results;
                  _ref = data.result;
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    x = _ref[_i];
                    _results.push(collection.push(new Model(x, url + x.id + '/')));
                  }
                  return _results;
                })()
              ];
              return success(collection);
            } else {
              return success(new Model(data.result, url));
            }
          } else {
            return error(data, null);
          }
        },
        error: function(xhr, txtStatus, exception) {
          return error(null, exception);
        }
      });
    };

    API.prototype.semesters = function(success, error) {
      return this.get(this.url('semesters'), success, error);
    };

    API.prototype.departments = function(success, error) {
      return this.get(this.url('departments'), success, error);
    };

    API.prototype.courses = function(success, error) {
      return this.get(this.url('courses'), success, error);
    };

    API.prototype.sections = function(success, error) {
      return this.get(this.url('sections'), success, error);
    };

    return API;

  })();

  window.api = api = new API;

}).call(this);
