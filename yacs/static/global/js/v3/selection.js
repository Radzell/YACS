// Generated by CoffeeScript 1.3.1
(function() {
  var ConflictDetector, MemoryBackend, Selection, Storage;

  MemoryBackend = (function() {

    MemoryBackend.name = 'MemoryBackend';

    function MemoryBackend(obj) {
      this.obj = obj;
    }

    MemoryBackend.prototype.setItem = function(key, strval) {
      return this.obj[key] = strval;
    };

    MemoryBackend.prototype.getItem = function(key) {
      return this.obj[key];
    };

    MemoryBackend.prototype.removeItem = function(key) {
      var val;
      val = this.obj[key];
      delete this.obj[key];
      return val;
    };

    return MemoryBackend;

  })();

  Storage = (function() {

    Storage.name = 'Storage';

    Storage.prototype.version = 3;

    function Storage(options) {
      this.options = $.extend({
        serialize: JSON.stringify,
        deserialize: $.parseJSON,
        store: null
      }, options || {});
    }

    Storage.prototype.load = function() {
      var curr_ver, msg;
      Logger.info('loaded from storage');
      curr_ver = this.get('version');
      if (isNaN(curr_ver) || curr_ver !== this.version) {
        msg = format('Invalid version from store (got {{ old }}, expected {{ new }})', {
          old: this.get('version', 0),
          "new": this.version
        });
        Logger.warn(msg);
        if (isNaN(curr_ver)) {
          this.getStore().clear();
        }
        this.clear();
      }
      this.set('version', this.version);
      return this;
    };

    Storage.prototype.getStore = function() {
      if (this.options.store) {
        return this.options.store;
      }
      if (window.localStorage) {
        return window.localStorage;
      }
      return window.sessionStorage;
    };

    Storage.prototype.keys = function() {
      return Object.keys(this.getStore());
    };

    Storage.prototype.contains = function(key) {
      return this.keys().indexOf(key) >= 0;
    };

    Storage.prototype.set = function(key, value) {
      assert($.type(key) === 'string', 'key must be a string');
      return this.getStore().setItem(key, this.options.serialize(value));
    };

    Storage.prototype.remove = function(key) {
      return this.getStore().removeItem(key);
    };

    Storage.prototype.get = function(key, default_value) {
      assert($.type(key) === 'string', 'key must be a string');
      if (this.contains(key)) {
        try {
          return this.options.deserialize(this.getStore().getItem(key));
        } catch (error) {
          return default_value;
        }
      } else {
        Logger.info('key missing, using default:', key);
        return default_value;
      }
    };

    Storage.prototype.clear = function() {
      return this.getStore().clear();
    };

    return Storage;

  })();

  ConflictDetector = function(collection) {
    var comparer, get;
    get = function(array, item) {
      var i;
      i = array.indexOf(item);
      if (i >= 0) {
        return array[i];
      } else {
        return null;
      }
    };
    comparer = function(sid1, sid2) {
      var s1, s2;
      s1 = collection.get(parseInt(sid1, 10));
      s2 = collection.get(parseInt(sid2, 10));
      console.log(collection, sid1, sid2, s1, s2);
      return (s1 != null) && get(s1.get('conflicts'), sid2) || (s2 != null) && get(s2.get('conflicts'), sid1);
    };
    comparer.update = function(new_data) {
      collection = new_data;
      if ((new_data != null) && (comparer.on_ready != null)) {
        return comparer.on_ready();
      }
    };
    comparer.is_ready = function() {
      return collection != null;
    };
    return comparer;
  };

  Selection = (function() {

    Selection.name = 'Selection';

    function Selection(options) {
      var self;
      options = $.extend({
        data: null,
        storage: (new Storage()).load(),
        conflictor: null
      }, options);
      this.conflicts_with = options.conflictor;
      this.storage = options.storage;
      this.data = options.data || this.storage.get('selection', {});
      self = this;
      conflictor.on_ready = function() {
        return self.validate();
      };
      Logger.info('data', this.data);
    }

    Selection.prototype.clear = function() {
      return this.data = {};
    };

    Selection.prototype.get = function(course_id) {
      return this.data[course_id];
    };

    Selection.prototype.set = function(data) {
      return this.data = $.extend({}, data);
    };

    Selection.prototype.save = function() {
      return this.storage.set('selection', this.data);
    };

    Selection.prototype.course_ids = function() {
      return Object.keys(this.data);
    };

    Selection.prototype.conflicts_with = function(section_id) {
      var cid, conflict, conflicts_with, sid, sids, _i, _j, _len, _len1, _ref;
      conflicts_with = null;
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cid = _ref[_i];
        sids = this.data[cid];
        conflict = -1;
        for (_j = 0, _len1 = sids.length; _j < _len1; _j++) {
          sid = sids[_j];
          conflict = this.conflictor(sid, section_id);
          if (!(conflict != null)) {
            break;
          }
        }
        if (conflict != null) {
          conflicts_with = {
            course_id: parseInt(cid, 10),
            section_id: conflict
          };
          break;
        }
      }
      if ((conflicts_with != null) && (conflicts_with.section_id != null)) {
        return conflicts_with;
      }
      return null;
    };

    Selection.prototype.validate = function() {
      var cid, conflict, i, j, schedule, schedules, section_ids, valid, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2, _ref3;
      section_ids = [];
      _ref = Object.keys(this.data);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cid = _ref[_i];
        section_ids.push(this.data[cid]);
        console.log(this.data[cid]);
      }
      console.log(section_ids);
      schedules = product(section_ids);
      for (_j = 0, _len1 = schedules.length; _j < _len1; _j++) {
        schedule = schedules[_j];
        valid = true;
        for (i = _k = 0, _ref1 = schedule.length - 1; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
          for (j = _l = _ref2 = i + 1, _ref3 = schedule.length; _ref2 <= _ref3 ? _l < _ref3 : _l > _ref3; j = _ref2 <= _ref3 ? ++_l : --_l) {
            console.log(schedule, i, j);
            conflict = this.conflicts_with(schedule[i], schedule[j]);
            console.log(conflict);
            if (conflict) {
              valid = false;
              return false;
            }
          }
        }
      }
      return schedules.length !== 0;
    };

    Selection.prototype.toggle_course = function(course_id, section_ids) {
      if (this.data[course_id] != null) {
        delete this.data[course_id];
        this.save();
        return false;
      } else {
        this.data[course_id] = section_ids;
        this.save();
        return true;
      }
    };

    Selection.prototype.toggle_section = function(course_id, section_id) {
      var _base;
      if ((this.data[course_id] != null) && this.data[course_id].indexOf(section_id) >= 0) {
        this.data[course_id] = _.without(this.data[course_id], section_id);
        if (this.data[course_id].length === 0) {
          delete this.data[course_id];
          this.save();
          return true;
        }
      } else {
        if ((_base = this.data)[course_id] == null) {
          _base[course_id] = [];
        }
        this.data[course_id].push(section_id);
      }
      this.save();
      return false;
    };

    return Selection;

  })();

  window.MemoryBackend = MemoryBackend;

  window.Storage = Storage;

  window.Selection = Selection;

  window.ConflictDetector = ConflictDetector;

}).call(this);
