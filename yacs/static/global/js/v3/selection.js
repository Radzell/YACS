// Generated by CoffeeScript 1.3.1
(function() {
  var MemoryBackend, Storage;

  MemoryBackend = (function() {

    MemoryBackend.name = 'MemoryBackend';

    function MemoryBackend(obj) {
      this.obj = obj;
    }

    MemoryBackend.prototype.setItem = function(key, strval) {
      return this.obj[key] = strval;
    };

    MemoryBackend.prototype.getItem = function(key) {
      return this.obj[key];
    };

    MemoryBackend.prototype.removeItem = function(key) {
      var val;
      val = this.obj[key];
      delete this.obj[key];
      return val;
    };

    return MemoryBackend;

  })();

  Storage = (function() {

    Storage.name = 'Storage';

    function Storage(options) {
      this.keys = [];
      this.options = $.extend({
        autoload: true,
        keyFormat: 'net.jeffhui.{{ scope }}.{{ key }}',
        serialize: JSON.stringify,
        deserialize: $.parseJSON,
        store: null
      }, options || {});
      if (this.options.autoload) {
        this.load;
      }
    }

    Storage.prototype.load = function() {
      var raw;
      raw = this._get(this._getFullKey('keys', {
        isPrivate: true
      }));
      console.log(raw);
      try {
        this.keys = this._deserialize(raw);
      } catch (error) {
        this.keys = raw.split(',');
        if ($.trim(this.keys[0]) === '') {
          this.keys = [];
        }
      }
      return this;
    };

    Storage.prototype.getStore = function() {
      if (this.options.store) {
        return this.options.store;
      }
      if (window.localStorage) {
        return window.localStorage;
      }
      return window.sessionStorage;
    };

    Storage.prototype._get = function(key) {
      return this.getStore().getItem(key);
    };

    Storage.prototype._set = function(key, strval) {
      return this.getStore().setItem(key, strval);
    };

    Storage.prototype._remove = function(key) {
      return this.getStore().removeItem(key);
    };

    Storage.prototype._serialize = function(str) {
      return this.options.serialize(str);
    };

    Storage.prototype._deserialize = function(str) {
      return this.options.deserialize(str);
    };

    Storage.prototype._save = function() {
      return this._set(this._getFullKey('keys', {
        isPrivate: true
      }), this.keys);
    };

    Storage.prototype._getFullKey = function(name, options) {
      var opt;
      opt = $.extend({
        isPrivate: false
      }, options);
      return format(this.options.keyFormat, {
        scope: opt.isPrivate ? 'private' : 'public',
        key: name
      });
    };

    Storage.prototype.contains = function(key) {
      return this.keys.indexOf(key) >= 0;
    };

    Storage.prototype.set = function(key, value) {
      var fullKey;
      assert($.type(key) === 'string', 'key must be a string');
      fullKey = this._getFullKey(key);
      this._set(fullKey, this._serialize(value));
      pushUnique(this.keys, key);
      return this._save();
    };

    Storage.prototype.get = function(key) {
      var fullKey;
      assert($.type(key) === 'string', 'key must be a string');
      fullKey = this._getFullKey(key);
      return this._deserialize(this._get(fullKey));
    };

    Storage.prototype.clear = function() {
      var fullKey, key, _i, _len, _ref;
      _ref = this.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        fullKey = this._getFullKey(key);
        this._remove(fullKey);
      }
      return this._save();
    };

    return Storage;

  })();

  window.MemoryBackend = MemoryBackend;

  window.Storage = Storage;

}).call(this);
