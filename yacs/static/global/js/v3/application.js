// Generated by CoffeeScript 1.3.1
(function() {
  var conflict_runner, courses, create_summaries, has_initialized, initialize_validator, templates, validator, visualize_conflicts;

  if ($('.content').length === 0) {
    return;
  }

  create_summaries = function() {
    var elements;
    elements = $('.summarize').not('.has-summary');
    summarize(elements, {
      summary_length: 150
    });
    return elements.addClass('has-summary');
  };

  $(function() {
    return create_summaries();
  });

  templates = null;

  $(function() {
    return window.templates = templates = find_templates();
  });

  $(function() {
    var spinner;
    spinner = $('#search-spinner');
    return updateform('#searchform', {
      start: function() {
        return spinner.show();
      },
      update: function(html) {
        $('#replacable-with-search').html(html);
        return create_summaries();
      },
      error: function() {
        return spinner.fadeOut();
      }
    });
  });

  validator = null;

  has_initialized = false;

  initialize_validator = function() {
    var callback;
    if (has_initialized) {
      return;
    }
    $('input[type=checkbox]').attr('disabled', 'disabled');
    callback = barrier(2, function() {
      has_initialized = true;
      $('input[type=checkbox]').removeAttr('disabled');
      return console.log('loaded!');
    });
    api.conflicts(function(conflicts) {
      validator.set_conflicts(conflicts);
      return callback();
    });
    return api.sections(function(sections) {
      validator.set_sections(sections);
      return callback();
    });
  };

  courses = null;

  $(function() {
    return api.courses(function(data) {
      return courses = data;
    });
  });

  conflict_runner = null;

  visualize_conflicts = function() {
    if (conflict_runner != null) {
      conflict_runner.abort();
    }
    return conflict_runner = iterate($('.course > input[type=checkbox]'), {
      each: function(element, i) {
        var cid, conflicted_sections, course, course_id, el, s, sec2course, section, section_id, section_ids, _i, _j, _len, _len1, _results;
        el = $(element);
        course_id = parseInt(el.attr('data-cid'), 10);
        section_ids = array_of_ints(el.attr('data-sids'));
        conflicted_sections = [];
        s = selection.copy();
        validator.set_data(s.data);
        sec2course = {};
        for (_i = 0, _len = section_ids.length; _i < _len; _i++) {
          section_id = section_ids[_i];
          cid = validator.conflicts_with(section_id);
          if (cid != null) {
            conflicted_sections.push(section_id);
            sec2course[section_id] = cid;
            console.log('conflicts', cid, course_id);
          } else {
            s.add_section(course_id, section_id);
            validator.set_data(s.data);
            if (!validator.is_valid()) {
              conflicted_sections.push(section_id);
            }
            s.undo();
          }
        }
        course = $('#course_' + course_id).parent().removeClass('conflict');
        course.find('.conflict').removeClass('conflict');
        course.find('.conflicts_with_course, .conflicts_with_section').remove();
        course.find('input[type=checkbox]').removeAttr('disabled');
        if (conflicted_sections.length === section_ids.length) {
          if ($('#course_' + course_id).checked()) {
            return;
          }
          course.addClass('conflict');
          course.append(templates.conflict_template({
            classname: 'conflicts_with_course',
            name: courses.get(sec2course[conflicted_sections[0]]).get('name')
          }));
          return course.find('input[type=checkbox]').attr('disabled', 'disabled');
        } else {
          _results = [];
          for (_j = 0, _len1 = conflicted_sections.length; _j < _len1; _j++) {
            section_id = conflicted_sections[_j];
            if ($('#section_' + section_id).checked()) {
              continue;
            }
            section = $('#section_' + section_id).parent().addClass('conflict');
            _results.push(section.find('label').append(templates.conflict_template({
              classname: 'conflicts_with_section',
              name: courses.get(sec2course[section_id]).get('name')
            })));
          }
          return _results;
        }
      },
      end: function() {
        return conflict_runner = null;
      }
    });
  };

  $(function() {
    var selection, that;
    window.selection = selection = new Selection();
    window.validator = validator = new Validator();
    if (selection.has_courses()) {
      initialize_validator();
    } else if ($('input[type=checkbox]').length) {
      initialize_validator();
    }
    that = this;
    $('.course > input[type=checkbox]').click(function() {
      var course_id, el, free_section_ids, full_section_ids, is_checked, parent, section_id, section_ids, sections, valid_sections, _i, _j, _k, _len, _len1, _len2;
      el = $(this);
      is_checked = el.checked();
      course_id = parseInt(el.attr('data-cid'), 10);
      section_ids = array_of_ints(el.attr('data-sids'));
      full_section_ids = array_of_ints(el.attr('data-sids-full'));
      free_section_ids = _.difference(section_ids, full_section_ids);
      parent = el.parent();
      sections = (free_section_ids.length ? free_section_ids : section_ids);
      if (is_checked) {
        valid_sections = [];
        for (_i = 0, _len = sections.length; _i < _len; _i++) {
          section_id = sections[_i];
          validator.set_data(selection.data);
          if (!validator.conflicts_with(section_id)) {
            selection.add_section(course_id, section_id);
            validator.set_data(selection.data);
            if (!validator.is_valid(section_ids)) {
              console.log('undo', section_id);
              selection.undo();
            } else {
              console.log('add', section_id);
              valid_sections.push(section_id);
            }
          } else {
            console.log('obvious conflict', section_id);
          }
        }
        for (_j = 0, _len1 = valid_sections.length; _j < _len1; _j++) {
          section_id = valid_sections[_j];
          parent.find('#section_' + section_id).checked(is_checked);
        }
        if (valid_sections.length === 0) {
          el.checked(false);
          return false;
        }
      } else {
        validator.set_data(selection.data);
        selection.remove_course(course_id, section_ids);
        for (_k = 0, _len2 = sections.length; _k < _len2; _k++) {
          section_id = sections[_k];
          parent.find('#section_' + section_id).checked(is_checked);
        }
      }
      return visualize_conflicts();
    });
    return $('.section > input[type=checkbox]').click(function() {
      var checked_courses, course_id, el, is_checked, parent, section_id;
      el = $(this);
      is_checked = el.checked();
      course_id = parseInt(el.attr('data-cid'), 10);
      section_id = parseInt(el.attr('data-sid'), 10);
      validator.set_data(selection.data);
      if (validator.conflicts_with(section_id)) {
        console.log('obvious conflict');
        return false;
      }
      if (is_checked) {
        selection.add_section(course_id, section_id);
      } else {
        selection.remove_section(course_id, section_id);
      }
      validator.set_data(selection.data);
      if (!validator.is_valid()) {
        selection.undo();
        console.log('deep conflict!');
        return false;
      }
      parent = el.parents('.course');
      checked_courses = false;
      parent.find('.section > input[type=checkbox]').each(function() {
        if ($(this).checked() === true) {
          return checked_courses = true;
        }
      });
      if (!checked_courses || is_checked) {
        parent.find('> input[type=checkbox]').checked(is_checked);
      }
      return visualize_conflicts();
    });
  });

}).call(this);
