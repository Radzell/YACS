// Generated by CoffeeScript 1.3.1
(function() {
  var YACS, create_summaries, sync_selection;

  YACS = {
    summary_length: 150,
    search_delay: 1000
  };

  window.templates = {
    _processed: 0
  };

  $(function() {
    return window.templates = find_templates();
  });

  create_summaries = function() {
    return summarize($('.summarize'), {
      summary_length: YACS.summary_length
    });
  };

  $(create_summaries);

  $(function() {
    var spinner, target;
    spinner = $('#search-spinner');
    target = $('#replacable-with-search');
    return realtime_form('#searchform', target, {
      delay: YACS.search_delay,
      serializer: function(form, method) {
        return form.serialize() + '&partial=1';
      },
      event_start: function() {
        return spinner.show();
      },
      request_start: function() {
        return Logger.info('search query: ' + $('#q').val());
      },
      complete: function() {
        return spinner.fadeOut(500);
      },
      success: function() {
        return summarize(target.find('.summarize'), {
          summary_length: YACS.summary_length
        });
      }
    });
  });

  sync_selection = function(selection) {
    var cid, section_id, _i, _j, _len, _len1, _ref, _ref1;
    $('.course > input[type=checkbox], .section > input[type=checkbox]').checked(false);
    _ref = selection.course_ids();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cid = _ref[_i];
      $('#course_' + cid).checked(true);
      Logger.info('check', '#course_' + cid);
      _ref1 = selection.get(cid);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        section_id = _ref1[_j];
        $('#section_' + section_id).checked(true);
        Logger.info('check', '#section_' + section_id);
      }
    }
    return Logger.info("Synced UI with selection.");
  };

  $(function() {
    var selection;
    window.conflictor = ConflictDetector();
    api.conflicts((function(data) {
      Logger.info('Loaded conflict data.');
      return conflictor.update(data);
    }), function() {
      return Logger.error('Failed to load conflicts');
    });
    window.selection = selection = new Selection({
      conflictor: conflictor
    });
    $('.course > input[type=checkbox], .section > input[type=checkbox]').live('change', function() {
      var cid, course_is_empty, free_sids, full_sids, id, is_checked, sid, sids, _i, _j, _len, _len1, _results, _results1;
      cid = parseInt($(this).attr('data-cid'), 10);
      sid = $(this).attr('data-sid');
      if (sid != null) {
        Logger.info("section#" + sid + " toggled");
        course_is_empty = selection.toggle_section(cid, parseInt(sid, 10));
        return $('#course_' + cid).checked(!course_is_empty);
      } else {
        sids = array_of_ints($(this).attr('data-sids'));
        full_sids = array_of_ints($(this).attr('data-sids-full'));
        free_sids = _.difference(sids, full_sids);
        is_checked = selection.toggle_course(cid, free_sids);
        if (is_checked) {
          if (free_sids.length) {
            Logger.info("Course#" + cid + " toggled - checked free: " + free_sids.join(', '));
            _results = [];
            for (_i = 0, _len = free_sids.length; _i < _len; _i++) {
              id = free_sids[_i];
              _results.push($('#section_' + id).checked(true));
            }
            return _results;
          } else {
            Logger.info("Course#" + cid + " toggled - checked all");
            _results1 = [];
            for (_j = 0, _len1 = sids.length; _j < _len1; _j++) {
              id = sids[_j];
              _results1.push($('#section_' + id).checked(true));
            }
            return _results1;
          }
        } else {
          Logger.info("Course#" + cid + " toggled - unchecked");
          return $('#course_' + cid).parent().find('.section input[type=checkbox]').checked(false);
        }
      }
    });
    return sync_selection(selection);
  });

  $(function() {
    var target;
    target = $('#selected_courses');
    if (!target.length) {
      return;
    }
    if (selection.is_empty()) {
      return target.html(templates.no_courses_template());
    } else {
      target.empty();
      return window.api.courses((function(courses) {
        var cid, context, _i, _len, _ref;
        context = {
          alwaysShowSections: true,
          days_of_the_week: 'Monday Tuesday Wednesday Thursday Friday'.split(' '),
          periodsByDayOfWeek: function(periods) {
            var period, remapped_periods, _i, _len;
            remapped_periods = {};
            self.options.dows.each(function(dow) {
              return remapped_periods[dow] = [];
            });
            for (_i = 0, _len = periods.length; _i < _len; _i++) {
              period = periods[_i];
              period.get('days_of_the_week').each(function(dow) {
                return remapped_periods[dow].push(period);
              });
            }
            return remapped_periods;
          },
          isSelectedCRN: function(sid) {
            return selection.has_section_id(sid);
          },
          requires_truncation: function(string, max) {
            return !string || string.length > max;
          },
          truncate: function(string, max) {
            if (string.substring(0, max) === string) {
              return string;
            }
            return string.substring(0, max - 3) + '...';
          },
          bold_topics_include: function(string) {
            return string.replace('Topics include', '<strong>Topics include</strong>');
          },
          displayPeriod: function(p) {
            var end, fmt, start;
            fmt = '{{ 0 }}-{{ 1 }}';
            start = FunctionsContext.time_parts(p.get('start'));
            end = FunctionsContext.time_parts(p.get('end'));
            return format(fmt, FunctionsContext.humanize_time(p.get('start'), {
              includesAPM: false
            }), FunctionsContext.humanize_time(p.get('end')));
          },
          isReadOnly: true
        };
        _ref = selection.course_ids();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cid = _ref[_i];
          context.course = courses.get(cid);
          Logger.info(context.course);
          target.append(templates.course_template(context));
        }
        return create_summaries();
      }), function() {
        return Logger.error('Failed to fetch courses');
      });
    }
  });

}).call(this);
