// Generated by CoffeeScript 1.6.3
(function() {
  var getCookie,
    __slice = [].slice;

  window.getCookie = getCookie = function(name, source) {
    var c, cookies, rawName, value, _i, _len, _ref;
    if (source == null) {
      source = document.cookie;
    }
    if (source && source !== '') {
      cookies = source.split(';');
      for (_i = 0, _len = cookies.length; _i < _len; _i++) {
        c = cookies[_i];
        _ref = $.trim(c).split('=', 2), rawName = _ref[0], value = _ref[1];
        if (rawName === name) {
          return decodeURIComponent(value);
        }
      }
    }
    return null;
  };

  window.product = function() {
    var array, arrays, newarr, result, tmp, x, y, _i, _j, _k, _len, _len1, _len2;
    arrays = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = [[]];
    for (_i = 0, _len = arrays.length; _i < _len; _i++) {
      array = arrays[_i];
      tmp = [];
      for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
        x = result[_j];
        for (_k = 0, _len2 = array.length; _k < _len2; _k++) {
          y = array[_k];
          newarr = x.slice(0);
          newarr.push(y);
          tmp.push(newarr);
        }
      }
      result = tmp;
    }
    return result;
  };

  window.assert = function(bool, message) {
    if (!bool) {
      throw message || 'Assertion Failed';
    }
  };

  window.pushUnique = function(array, item) {
    if (array.indexOf(item) < 0) {
      array.push(item);
      return true;
    } else {
      return false;
    }
  };

  window.format = function() {
    var obj, string, values;
    string = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (values.length < 1) {
      return string;
    }
    if (values.length === 1 && $.type(values[0]) === 'object') {
      obj = values[0];
      return string.replace(/{{ *([a-zA-Z0-9_-]+) *}}/g, function(match, identifer) {
        if (obj[identifer] != null) {
          return obj[identifer];
        } else {
          return match;
        }
      });
    } else {
      return string.replace(/{{ *(\d+) *}}/g, function(match, index) {
        var type;
        if (values[index] != null) {
          return values[index];
        } else if (index < values.length) {
          type = $.type(values[index]);
          if (type === 'undefined') {
            return '<undefined>';
          } else if (type === 'null') {
            return '<null>';
          } else {
            return '<unknown>';
          }
        } else {
          return match;
        }
      });
    }
  };

  window.hash_by_attr = function(array, attr, options) {
    var item, key, result, value, _i, _len;
    result = {};
    if (options == null) {
      options = {};
    }
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (item == null) {
        continue;
      }
      if ($.isFunction(attr)) {
        key = attr(item);
      } else {
        key = item[attr];
      }
      if (options.value != null) {
        if ($.isFunction(options.value)) {
          value = options.value(item);
        } else {
          value = item[options.value];
        }
      } else {
        value = item;
      }
      if (options.flat != null) {
        result[key] = value;
      } else {
        if (result[key] == null) {
          result[key] = [];
        }
        result[key].push(value);
      }
    }
    return result;
  };

  window.barrier = function(number, complete, context) {
    assert($.isFunction(complete), 'complete should be a function');
    return (function(number, complete) {
      var fn;
      fn = function(modify_context) {
        if ($.isFunction(modify_context)) {
          modify_context.call(fn.context, fn.context);
        }
        if (++fn.counter === number) {
          return complete.call(fn.context);
        }
      };
      fn.context = $.extend({}, context);
      fn.counter = 0;
      return fn;
    })(number, complete);
  };

  window.iterate = function(array, options) {
    var callback, i, item, job, _i, _ref;
    options = $.extend({
      delay: 5,
      context: {},
      each: function(item, index) {},
      end: function() {}
    }, options);
    job = {};
    $.extend(job, {
      is_running: true,
      abort: function() {
        return job.is_running = false;
      }
    });
    callback = barrier(array.length, function() {
      if (!job.is_running) {
        return;
      }
      job.is_running = false;
      return options.end.call(options.context);
    });
    for (i = _i = 0, _ref = array.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      item = array[i];
      setTimeout((function(item, i) {
        return function() {
          if (!job.is_running) {
            return;
          }
          options.each.call(options.context, item, i);
          return callback();
        };
      })(item, i), options.delay * i);
    }
    return job;
  };

  window.delayfn = function(msec, fn) {
    var timer;
    timer = null;
    return (function(msec) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        clearTimeout(timer);
        return timer = setTimeout((function() {
          return fn.apply(null, args);
        }), msec);
      };
    })(msec);
  };

  window.array_of_ints = function(string) {
    var numbers, parts, x, _i, _len;
    parts = string.split(',');
    numbers = [];
    for (_i = 0, _len = parts.length; _i < _len; _i++) {
      x = parts[_i];
      numbers.push(parseInt($.trim(x), 10));
    }
    if (numbers && numbers.length === 1 && isNaN(numbers[0])) {
      return [];
    } else {
      return numbers;
    }
  };

  window.Logger = {
    NONE: 0,
    CONSOLE: 1,
    SERVER: 2,
    USER: 3,
    enabled: true,
    log: function() {
      var message, type;
      type = arguments[0], message = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!Logger.enabled) {
        return;
      }
      if (Logger.mode == null) {
        Logger.mode = Logger.CONSOLE;
      }
      if (Logger.mode >= Logger.CONSOLE) {
        console[type].apply(console, message);
      }
      if (Logger.modemode >= Logger.SERVER) {
        delayfn(200, function() {
          return console.log.apply(console, message);
        })();
      }
      if (Logger.modemode >= Logger.USER) {
        return alert(' '.join(message));
      }
    },
    info: function() {
      var message;
      message = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Logger.log.apply(Logger, ['log'].concat(__slice.call(message)));
    },
    warn: function() {
      var message;
      message = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Logger.log.apply(Logger, ['warn'].concat(__slice.call(message)));
    },
    error: function() {
      var message;
      message = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Logger.log.apply(Logger, ['error'].concat(__slice.call(message)));
    }
  };

  $(document).ajaxSend(function(evt, xhr, settings) {
    var safeMethod, sameOrigin;
    sameOrigin = function(url) {
      var host, origin, protocol, sr_origin;
      host = document.location.host;
      protocol = document.location.protocol;
      sr_origin = '//' + host;
      origin = protocol + sr_origin;
      return (url === origin || url.slice(0, origin.length + 1) === origin + '/') || (url === sr_origin || url.slice(0, sr_origin.length + 1) === sr_origin + '/') || !(/^(\/\/|http:|https:).*/.test(url));
    };
    safeMethod = function(method) {
      return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);
    };
    if (!safeMethod(settings.type) && sameOrigin(settings.url)) {
      return xhr.setRequestHeader("X-CSRFToken", getCookie('csrftoken'));
    }
  });

}).call(this);
